{"version":3,"sources":["components/CockPit/Cockpit.css","components/Persons/Person/Person.js","components/Persons/Persons.js","components/CockPit/Cockpit.js","containers/App.js","serviceWorker.js","index.js","containers/App.css","components/Persons/Person/Person.css"],"names":["module","exports","red","bold","Cockpit","Red","person","props","react_default","a","createElement","className","classes","Person","onClick","click","club","position","children","type","onChange","changed","value","persons","map","index","Person_Person","clicked","key","id","event","cockpit","btnClass","showClubs","assignedClasses","length","push","join","App","state","switchClubName","newClub","_this","setState","clubChanged","clubIndex","findIndex","c","Object","objectSpread","target","toConsumableArray","deleteClub","clubs","splice","toggleClubs","this","Persons","CockPit_Cockpit","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.433ba414.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"Cockpit__red__A4hyR\",\"bold\":\"Cockpit__bold__3qiL4\",\"Cockpit\":\"Cockpit__Cockpit__1U6Lb\",\"Red\":\"Cockpit__Red__3JNRC\"};","import React from 'react';\r\n//import '../../containers/App.css';\r\nimport classes from './Person.css';\r\nconst person = (props) => {\r\n    // const style = {\r\n    //     '@media (min-width: 500px)':{\r\n    //         width:'450px'\r\n    //     }\r\n    // }\r\n    return (\r\n        <div className={classes.Person}>\r\n            <p onClick={props.click}> club: {props.club} and \r\n            rank: {props.position}\r\n            </p>\r\n            <p>{props.children}</p>\r\n            <input type='text' onChange={props.changed} value={props.club}/>\r\n        </div>\r\n    )\r\n};\r\nexport default person;","import React from 'react';\r\nimport Person from './Person/Person';\r\n\r\nconst persons = (props) =>  \r\n    props.persons.map( (person, index) => {\r\n        return (\r\n            <Person click={()=>props.clicked(index)} \r\n                                  club={person.club} \r\n                                  position={person.position}\r\n                                  key={person.id}\r\n                                  changed={(event)=>props.changed(event, person.id)}\r\n                                  />\r\n      )});\r\n\r\nexport default persons;","import React from 'react';\r\nimport classes from './Cockpit.css'\r\n\r\nconst cockpit = (props) => {\r\n    let btnClass = \"\";\r\n    if(props.showClubs){\r\n        btnClass = classes.Red;\r\n    }\r\n    let assignedClasses = [];\r\n        if(props.persons.length <= 2){\r\n          assignedClasses.push( classes.red);\r\n        } \r\n        if(props.persons.length <= 1){\r\n          assignedClasses.push( classes.bold );\r\n        }\r\n    return(\r\n        <div className={classes.Cockpit}>\r\n            <h1>Hi, React</h1>\r\n            <p className={assignedClasses.join(' ')}>its working</p>\r\n            <button className={btnClass} onClick={props.clicked}>toggle</button>\r\n        </div>\r\n        );\r\n};\r\nexport default cockpit;\r\n","import React, { Component } from 'react';\nimport classes from './App.css';\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/CockPit/Cockpit'\n//import Radium, {StyleRoot} from 'radium';\n \nclass App extends Component {\n  \n  state = {\n    persons: [\n      { id: 'adsdf', club:'barcelona', position:'1'},\n      { id: 'gbsbg', club:'real madrid', position:'2'},\n      { id: 'ujett', club:'atletico madrid', position:'3'},\n      { id: 'mry6y', club:'sevilla', position:'4'}\n    ],\n    showClubs: false\n  } \n\n  switchClubName = (newClub) =>{\n    //console.log('clicked');\n    //this.state.persons[1].club = 'RM';\n    this.setState({\n      persons: [\n        { club:'barcelona', position:'1'},\n        { club:'RM', position:'2'},\n        { club:'atletico madrid', position:'3'},\n        { club: newClub, position:'5'}\n      ]\n    })\n  }\n\n  clubChanged = (event, id) => { \n    const clubIndex = this.state.persons.findIndex( c => {\n      return c.id === id;\n    });\n\n    const club = {\n      ...this.state.persons[clubIndex]\n    };\n\n    club.club = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[clubIndex] = club;\n    this.setState({\n      persons: persons\n    })\n  }\n  deleteClub = (clubIndex) => {\n    //const clubs = this.state.persons.slice();\n    const clubs = [...this.state.persons]; \n    clubs.splice(clubIndex,1);\n    this.setState({persons:clubs});\n  }\n\n  toggleClubs = () =>\n  {\n    //const doesShow = this.state.showClubs;\n    this.setState({\n      showClubs: ! this.state.showClubs\n    });\n  }\n\n  render() {\n    let persons = null;\n        if(this.state.showClubs){\n          persons = <Persons persons={this.state.persons}\n                     clicked={this.deleteClub}\n                     changed={this.clubChanged}\n                    />;\n        }\n        \n        \n    return (\n      //<StyleRoot>\n        <div className={classes.App}>\n          <Cockpit showClubs={this.state.showClubs}\n                   persons={this.state.persons}\n                   clicked={this.toggleClubs}\n          />\n          {persons}\n        </div>\n     // </StyleRoot>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n   serviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__3t9oX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person__Person__3tqvL\"};"],"sourceRoot":""}