{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","react_default","a","createElement","className","onClick","click","club","position","children","type","onChange","changed","value","App","state","persons","showClubs","switchClubName","newClub","_this","setState","clubChanged","event","target","toggleClubs","doesShow","this","map","Person_Person","style","backgroundColor","font","border","padding","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAaeA,eAXA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,KAAGE,QAASL,EAAMM,OAAlB,UAAiCN,EAAMO,KAAvC,cACOP,EAAMQ,UAEbP,EAAAC,EAAAC,cAAA,SAAIH,EAAMS,UACVR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,SAAUX,EAAMY,QAASC,MAAOb,EAAMO,UCyEtDO,6MA7EbC,MAAQ,CACNC,QAAS,CACP,CAAET,KAAK,YAAaC,SAAS,KAC7B,CAAED,KAAK,cAAeC,SAAS,KAC/B,CAAED,KAAK,kBAAmBC,SAAS,KACnC,CAAED,KAAK,UAAWC,SAAS,MAE7BS,WAAW,KAGbC,eAAiB,SAACC,GAGhBC,EAAKC,SAAS,CACZL,QAAS,CACP,CAAET,KAAK,YAAaC,SAAS,KAC7B,CAAED,KAAK,KAAMC,SAAS,KACtB,CAAED,KAAK,kBAAmBC,SAAS,KACnC,CAAED,KAAMY,EAASX,SAAS,WAKhCc,YAAc,SAACC,GACbH,EAAKC,SAAS,CACZL,QAAS,CACP,CAAET,KAAK,YAAaC,SAAS,KAC7B,CAAED,KAAK,KAAMC,SAAS,KACtB,CAAED,KAAK,kBAAmBC,SAAS,KACnC,CAAED,KAAMgB,EAAMC,OAAOX,MAAOL,SAAS,WAK3CiB,YAAc,WAEZ,IAAMC,EAAWN,EAAKL,MAAME,UAC5BG,EAAKC,SAAS,CACZJ,WAAYS,6EAKd,IAMIV,EAAU,KAkBd,OAhBOW,KAAKZ,MAAME,YACZD,EACEf,EAAAC,EAAAC,cAAA,WAGEwB,KAAKZ,MAAMC,QAAQY,IAAK,SAAA7B,GACtB,OAAOE,EAAAC,EAAAC,cAAC0B,EAAD,CAAQtB,KAAMR,EAAOQ,KAAMC,SAAUT,EAAOS,eAW7DP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAQE,QAASsB,KAAKF,YAAaK,MA3BzB,CACZC,gBAAiB,QACjBC,KAAM,UACNC,OAAQ,iBACRC,QAAS,QAuBP,UACClB,UAzESmB,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ac950204.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Person.css';\r\nconst person = (props) => {\r\n    return (\r\n        <div className='Person'>\r\n            <p onClick={props.click}> club: {props.club} and \r\n            rank: {props.position}\r\n            </p>\r\n            <p>{props.children}</p>\r\n            <input type='text' onChange={props.changed} value={props.club}/>\r\n        </div>\r\n    )\r\n};\r\nexport default person;","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person'\nclass App extends Component {\n  \n  state = {\n    persons: [\n      { club:'barcelona', position:'1'},\n      { club:'real madrid', position:'2'},\n      { club:'atletico madrid', position:'3'},\n      { club:'sevilla', position:'4'}\n    ],\n    showClubs: false\n  }\n\n  switchClubName = (newClub) =>{\n    //console.log('clicked');\n    //this.state.persons[1].club = 'RM';\n    this.setState({\n      persons: [\n        { club:'barcelona', position:'1'},\n        { club:'RM', position:'2'},\n        { club:'atletico madrid', position:'3'},\n        { club: newClub, position:'5'}\n      ]\n    })\n  }\n\n  clubChanged = (event) => {\n    this.setState({\n      persons: [\n        { club:'barcelona', position:'1'},\n        { club:'RM', position:'2'},\n        { club:'atletico madrid', position:'3'},\n        { club: event.target.value, position:'5'}\n      ]\n    })\n  }\n\n  toggleClubs = () =>\n  {\n    const doesShow = this.state.showClubs;\n    this.setState({\n      showClubs: !doesShow\n    });\n  }\n\n  render() {\n    const style = {\n      backgroundColor: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px'\n    }\n    let persons = null;\n\n        if(this.state.showClubs){\n          persons = (\n            <div>\n\n            {\n              this.state.persons.map( person => {\n                return <Person club={person.club} position={person.position}/>\n              })\n              /* <Person club={this.state.persons[0].club} position={this.state.persons[0].position}/> \n            <Person club={this.state.persons[1].club} position={this.state.persons[1].position} click={this.switchClubName.bind(this, 'girona')}/> \n            <Person club={this.state.persons[2].club} position={this.state.persons[2].position}> 2nd fav </Person> \n            <Person club={this.state.persons[3].club} position={this.state.persons[3].position} changed={this.clubChanged}/> */\n            }\n          </div>\n          );\n        }\n    return (\n      <div className=\"App\">\n        <h1>Hi, React</h1>\n        <button onClick={this.toggleClubs} style={style}>toggle</button>\n        {persons}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n   serviceWorker.unregister();\n"],"sourceRoot":""}